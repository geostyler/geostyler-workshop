{"version":3,"sources":["viewportHelper.js","Attributions.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["isElementInViewport","el","rect","getBoundingClientRect","top","window","innerHeight","document","documentElement","clientHeight","bottom","Attributions","className","href","getDefaultStyle","Style","stroke","Stroke","color","width","fill","Fill","image","Circle","radius","defaultOlStyle","base","baseSource","VectorSource","format","GeoJSON","url","extent","join","strategy","bboxStrategy","VectorLayer","source","style","projection","getBaseLayer","vector","covidDeath","deathSource","features","readFeatures","featureProjection","getCovidLayer","map","OlMap","view","OlView","center","zoom","layers","interactions","DragPan","olParser","OpenLayersParser","geojsonParser","GeoJSONParser","App","useState","styles","setStyles","drawerVisible","setDrawerVisible","visibleBox","setVisibleBox","data","setData","useEffect","readStyle","then","gsStyle","newStyles","i","push","JSON","parse","stringify","catch","error","console","log","readData","gsData","newStyle","writeStyle","olStyle","setStyle","handleScroll","newVisibleBox","boxIdx","getElementById","findIndex","box","getVisibleBox","addEventListener","removeEventListener","type","onClick","currentState","title","placement","closable","onClose","visible","mask","compact","onStyleChange","oldStyles","id","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.554886d4.chunk.js","sourcesContent":["function isElementInViewport (el) {\n\n    var rect = el.getBoundingClientRect();\n\n    return (\n        (rect.top >= 0 && rect.top <= (window.innerHeight || document.documentElement.clientHeight)) ||\n        (rect.bottom >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight))\n    );\n}\n\nexport default isElementInViewport;\n","import React from 'react';\n\nfunction Attributions() {\n    return (\n        <div className=\"attributions\">\n            <h1>Attributions</h1>\n            <ul>\n                <li><b>Countries:</b><a href=\"https://ahocevar.com/geoserver/wfs?service=WFS&version=1.1.0&request=GetCapabilities\">Andreas Hocevar & NaturalEarth</a></li>\n                <li><b>CoVid-19:</b><a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins University</a></li>\n            </ul>\n        </div>\n    );\n}\n\nexport default Attributions;\n","import { Stroke, Fill, Style, Circle } from 'ol/style';\nimport VectorSource from 'ol/source/Vector';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport GeoJSON from 'ol/format/GeoJSON';\n\nfunction getBaseLayer() {\n\n    var baseSource = new VectorSource({\n        format: new GeoJSON(),\n        url: function (extent) {\n            return 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n                'version=1.1.0&request=GetFeature&typename=opengeo:countries&' +\n                'outputFormat=application/json&srsname=EPSG:3857&' +\n                'bbox=' + extent.join(',') + ',EPSG:3857';\n        },\n        strategy: bboxStrategy\n    });\n\n    var base = new VectorLayer({\n        source: baseSource,\n        style: getDefaultStyle(),\n        projection: 'EPSG:3857'\n    });\n\n    return base;\n}\n\nfunction getCovidLayer(covidDeath) {\n    var deathSource = new VectorSource({\n        features: (new GeoJSON()).readFeatures(covidDeath, {\n            featureProjection: 'EPSG:3857'\n        })\n    });\n\n    var vector = new VectorLayer({\n        source: deathSource,\n        style: getDefaultStyle(),\n        projection: 'EPSG:4326'\n    });\n\n    return vector;\n}\n\nfunction getDefaultStyle() {\n    const defaultOlStyle = new Style({\n        stroke: new Stroke({\n            color: 'rgba(255, 255, 255, 1.0)',\n            width: 1\n        }),\n        fill: new Fill({\n            color: 'rgba(0, 0, 0, 1)'\n        }),\n        image: new Circle({\n            fill: new Fill({\n                color: 'rgba(255, 0, 0, 1.0)'\n            }),\n            radius: 5\n        })\n    });\n    return defaultOlStyle;\n}\n\nexport {\n    getBaseLayer,\n    getCovidLayer,\n    getDefaultStyle\n};\n","import React, { useState, useEffect } from 'react';\n\nimport OlMap from 'ol/Map';\nimport OlView from 'ol/View';\nimport DragPan from 'ol/interaction/DragPan';\nimport { Drawer, Button } from 'antd';\n\nimport OpenLayersParser from 'geostyler-openlayers-parser';\nimport GeoJSONParser from 'geostyler-geojson-parser';\n\nimport isElementInViewport from './viewportHelper';\n\nimport './App.css';\nimport 'ol/ol.css';\nimport 'antd/dist/antd.css';\nimport './Workshop.css';\nimport Attributions from './Attributions';\nimport {\n  getDefaultStyle,\n  getBaseLayer,\n  getCovidLayer\n} from './helper';\n\nimport {\n  MapComponent\n} from '@terrestris/react-geo';\n\nimport {\n  Style as GsStyle\n} from 'geostyler'\n\nimport covidDeath from './data/covid-death.json';\n\nconst defaultOlStyle = getDefaultStyle();\n\nvar base = getBaseLayer();\nvar vector = getCovidLayer(covidDeath);\n\nconst center = [0, 8000000];\n\nconst map = new OlMap({\n  view: new OlView({\n    center: center,\n    zoom: 2,\n    projection: 'EPSG:3857'\n  }),\n  layers: [base, vector],\n  interactions: [new DragPan()]\n});\n\nconst olParser = new OpenLayersParser();\nconst geojsonParser = new GeoJSONParser();\n\nfunction App() {\n\n  let [styles, setStyles] = useState([]);\n  let [drawerVisible, setDrawerVisible] = useState(false);\n  let [visibleBox, setVisibleBox] = useState(0);\n  let [data, setData] = useState();\n\n  useEffect(() => {\n    // on page init parse default style once\n    // and setup the styles array\n    olParser\n      .readStyle(defaultOlStyle)\n      .then(gsStyle => {\n        const newStyles = []\n        for (var i = 0; i < 3; i++) {\n          newStyles.push(JSON.parse(JSON.stringify(gsStyle)));\n        }\n        setStyles(newStyles);\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    // parse data as soon as it changes\n    geojsonParser\n      .readData(covidDeath)\n      .then(gsData => {\n        setData(gsData);\n      })\n      .catch(error => console.log(error));\n  }, [data]);\n\n  useEffect(() => {\n    // update the map layer when either visibleBox or styles changes\n    var newStyle = styles[visibleBox];\n    if (newStyle) {\n      olParser\n        .writeStyle(newStyle)\n        .then(olStyle => {\n          vector.setStyle(olStyle);\n        })\n        .catch(error => console.log(error));\n    }\n  });\n\n  useEffect(() => {\n    // add scroll eventlistener\n    // unfortunately, this will be re-run as soon as visible\n    // box changes. Otherwise we don't have visible box in our scope\n    const getVisibleBox = () => {\n      const boxes = [\n        document.getElementById('ws-overlay-1'),\n        document.getElementById('ws-overlay-2'),\n        document.getElementById('ws-overlay-3')\n      ]\n      const boxIdx = boxes.findIndex(box => isElementInViewport(box));\n      return boxIdx >= 0 ? boxIdx : visibleBox;\n    }\n\n    const handleScroll = () => {\n      const newVisibleBox = getVisibleBox();\n      if (newVisibleBox !== visibleBox) {\n        setVisibleBox(newVisibleBox);\n      }\n    }\n\n    document.addEventListener('scroll', handleScroll);\n\n    handleScroll();\n\n    return () => {\n      document.removeEventListener('scroll', handleScroll);\n    }\n  }, [visibleBox]);\n\n\n  return (\n    <div className=\"App\">\n      <Button\n        className=\"ws-toggle-editor-btn\"\n        type=\"primary\"\n        onClick={() => {\n          setDrawerVisible((currentState) => !currentState);\n        }}\n      >\n        Toggle Editor\n      </Button>\n      <MapComponent\n        map={map}\n      />\n      <Drawer\n        title='GeoStyler Editor'\n        placement='top'\n        closable={true}\n        onClose={() => {\n          setDrawerVisible(false);\n        }}\n        visible={drawerVisible}\n        mask={false}\n      >\n        <GsStyle\n          style={styles[visibleBox]}\n          compact={true}\n          data={data}\n          onStyleChange={newStyle => {\n            olParser\n              .writeStyle(newStyle)\n              .then(olStyle => {\n                vector.setStyle(olStyle);\n              })\n              .catch(error => console.log(error));\n            setStyles(oldStyles => {\n              const newStyles = JSON.parse(JSON.stringify(oldStyles));\n              newStyles[visibleBox] = newStyle;\n              return newStyles;\n            });\n          }}\n        />\n      </Drawer>\n      <span id=\"ws-overlay-1\" className=\"ws-overlay\">\n        <h1>Overlay {visibleBox + 1}</h1>\n        <p>\n          Put your info text here\n          </p>\n      </span>\n      <div id=\"ws-overlay-2\" className=\"ws-overlay\">\n        <h1>Overlay {visibleBox + 1}</h1>\n        <p>\n          Put your info text here\n          </p>\n      </div>\n      <div id=\"ws-overlay-3\" className=\"ws-overlay\">\n        <h1>Overlay {visibleBox + 1}</h1>\n        <p>\n          Put your info text here\n          </p>\n      </div>\n      <Attributions/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}